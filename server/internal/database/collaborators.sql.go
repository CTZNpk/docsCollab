// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: collaborators.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addCollaborator = `-- name: AddCollaborator :one
INSERT INTO DocumentCollaborators(document_id, collaborator_id)
VALUES ($1, $2)
RETURNING 1
`

type AddCollaboratorParams struct {
	DocumentID     uuid.UUID
	CollaboratorID uuid.UUID
}

func (q *Queries) AddCollaborator(ctx context.Context, arg AddCollaboratorParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addCollaborator, arg.DocumentID, arg.CollaboratorID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const checkDocumentAuthor = `-- name: CheckDocumentAuthor :one
SELECT 1 FROM documents WHERE id = $1 AND author_id = $2
`

type CheckDocumentAuthorParams struct {
	ID       uuid.UUID
	AuthorID uuid.UUID
}

func (q *Queries) CheckDocumentAuthor(ctx context.Context, arg CheckDocumentAuthorParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, checkDocumentAuthor, arg.ID, arg.AuthorID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getDocumentCollaborators = `-- name: GetDocumentCollaborators :many
SELECT u.id , u.username
FROM DocumentCollaborators dc
JOIN Users u ON dc.collaborator_id =  u.id
WHERE dc.document_id = $1
`

type GetDocumentCollaboratorsRow struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) GetDocumentCollaborators(ctx context.Context, documentID uuid.UUID) ([]GetDocumentCollaboratorsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentCollaborators, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDocumentCollaboratorsRow
	for rows.Next() {
		var i GetDocumentCollaboratorsRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementNumberOfCollaborators = `-- name: IncrementNumberOfCollaborators :exec
UPDATE Documents
SET number_of_collaborators = number_of_collaborators + 1
WHERE id = $1
`

func (q *Queries) IncrementNumberOfCollaborators(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementNumberOfCollaborators, id)
	return err
}
