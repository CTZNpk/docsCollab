// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: operations.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createOperation = `-- name: CreateOperation :one
INSERT INTO Operations(operation_type, document_id, operation_by, position, content)
VALUES ($1, $2, $3, $4, $5)
RETURNING 1
`

type CreateOperationParams struct {
	OperationType OperationType
	DocumentID    uuid.UUID
	OperationBy   uuid.UUID
	Position      int32
	Content       string
}

func (q *Queries) CreateOperation(ctx context.Context, arg CreateOperationParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createOperation,
		arg.OperationType,
		arg.DocumentID,
		arg.OperationBy,
		arg.Position,
		arg.Content,
	)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getDocumentOperations = `-- name: GetDocumentOperations :many
SELECT id, operation_type, document_id, operation_by, timestamp, position, content FROM Operations
WHERE document_id = $1
`

func (q *Queries) GetDocumentOperations(ctx context.Context, documentID uuid.UUID) ([]Operation, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentOperations, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Operation
	for rows.Next() {
		var i Operation
		if err := rows.Scan(
			&i.ID,
			&i.OperationType,
			&i.DocumentID,
			&i.OperationBy,
			&i.Timestamp,
			&i.Position,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
