// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addCollaborator = `-- name: AddCollaborator :one
INSERT INTO DocumentCollaborators(document_id, collaborator_id)
VALUES ($1, $2)
RETURNING 1
`

type AddCollaboratorParams struct {
	DocumentID     uuid.NullUUID
	CollaboratorID uuid.NullUUID
}

func (q *Queries) AddCollaborator(ctx context.Context, arg AddCollaboratorParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addCollaborator, arg.DocumentID, arg.CollaboratorID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const createDocument = `-- name: CreateDocument :one
INSERT INTO Documents(title, author_id)
VALUES ($1, $2)
RETURNING id, title
`

type CreateDocumentParams struct {
	Title    string
	AuthorID uuid.NullUUID
}

type CreateDocumentRow struct {
	ID    uuid.UUID
	Title string
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (CreateDocumentRow, error) {
	row := q.db.QueryRowContext(ctx, createDocument, arg.Title, arg.AuthorID)
	var i CreateDocumentRow
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}
